
@article{genSen14,
    author = "Iyyer, Mohit and Boyd-Graber, Jordan and Daumé III, Hal",
    title  = "Generating Sentences from Semantic Vector Space Representations",
    year   = "2014",
}

@book{HiOrProg,
    author = "Miller, Dale and Nadathur, Gopalan",
    title = "Programming with Higher-Order Logic",
    year = "2012",
    publisher = "Cambridge",
}

@article{genDerHaskell10,
    author = "Pedro Magalh\~{a}es, José and Dijkstra, Atze and Jeuring, Johan and {L\"{o}h}, Andres",
    title  = "A Generic Deriving Mechanism for Haskell",
    year   = "2010",
}

@article{reflDer97,
    author = "Winstanley, Noel",
    title  = "Reflections on Instance Derivation",
    year   = "1997",
}

@article{genDep,
    author = "Altenkirch, Thorsten and McBride, Conor",
    title  = "Generic Programming within Dependently Typed Programming",
}

@article{CSCoq13,
    author = "Tassi, Enrico and Mahboubi, Assia",
    title  = "Canonical Structures for the working Coq user",
    year   = 2013,
}

@article{CSCoq,
    author = "Sozeau, Matthieu and Oury, Nicolas",
    title  = "First-Class Type Classes",
}

@article{ELPI,
    author = "Dunchev, Cvetan and Guidi, Ferruccio and Sacerdoti Coen, Claudio and Tassi, Enrico",
    title  = "ELPI: fast, Embeddable $\lambda$Prolog Interpreter",
    year   = "2015",
}

@inproceedings{templateHaskell,
    author = {Sheard, Tim and Peyton Jones, Simon},
    title = {Template meta-programming for Haskell},
    booktitle = {},
    year = {2002},
    month = {October},
    abstract = {We propose a new extension to the purely functional programming language Haskell that supports compile-time meta-programming. The purpose of the system is to support the algorithmic construction of programs at compile-time.
        
            The ability to generate code at compile time allows the programmer to implement such features as polytypic programs, macro-like expansion, user directed optimization (such as inlining), and the generation of supporting data structures and functions from existing data structures and functions.
            
            Our design is being implemented in the Glasgow Haskell Compiler, ghc.
            
            &nbsp;},
    publisher = {},
    url = {https://www.microsoft.com/en-us/research/publication/template-meta-programming-for-haskell/},
    address = {},
    pages = {1-16},
    journal = {},
    volume = {},
    chapter = {},
    isbn = {},
}

@article{coqincoq,
    author = "Barras, Bruno and Werner, Benjamin",
    title  = "Coq in Coq",
    year   = "1997",
}

@article{ELPItype,
    author = "Guigi, Ferruccio and Sacerdoti Coean, Claudio and Tassi, Enrico",
    title  = "Implementing Type Theory in Higher Order Constraint Logic Programming",
}

